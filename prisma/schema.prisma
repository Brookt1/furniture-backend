datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Furniture {
  id            Int              @id @default(autoincrement())
  name          String
  description   String?
  price         Float
  averageRating Float            @default(0)
  categoryId    Int?
  category      Category?        @relation(fields: [categoryId], references: [id], onDelete: SetNull) // Ensure proper onDelete behavior
  images        FurnitureImage[]
  reviews       Review[]
  OrderItem     OrderItem[]
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @default(now()) @updatedAt

  Cart Cart[]
}

model Category {
  id        Int         @id @default(autoincrement())
  name      String      @unique
  furniture Furniture[]
  createdAt DateTime    @default(now())
  updatedAt DateTime    @default(now()) @updatedAt
}

model FurnitureImage {
  id          Int       @id @default(autoincrement())
  url         String
  furnitureId Int
  furniture   Furniture @relation(fields: [furnitureId], references: [id], onDelete: Cascade)
}

model Review {
  id          Int       @id @default(autoincrement())
  content     String
  rating      Int       @default(0)
  userId      Int
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  furnitureId Int
  furniture   Furniture @relation(fields: [furnitureId], references: [id], onDelete: Cascade)
  createdAt   DateTime  @default(now())
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  name      String?
  password  String
  role      String   @default("USER")
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  Review Review[]
  Order  Order[]
  Cart   Cart[]
}

model Cart {
  id          Int       @id @default(autoincrement())
  userId      Int
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  furnitureId Int
  furniture   Furniture @relation(fields: [furnitureId], references: [id], onDelete: Cascade)
  quantity    Int       @default(1)
  createdAt   DateTime  @default(now())
}

model Order {
  id          Int         @id @default(autoincrement())
  userId      Int
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  totalAmount Float
  status      String      @default("PENDING") // Status of the order (e.g., PENDING, COMPLETED, CANCELED)
  orderItems  OrderItem[]
  createdAt   DateTime    @default(now())
}

model OrderItem {
  id          Int       @id @default(autoincrement())
  orderId     Int
  order       Order     @relation(fields: [orderId], references: [id], onDelete: Cascade)
  furnitureId Int
  furniture   Furniture @relation(fields: [furnitureId], references: [id], onDelete: Cascade)
  quantity    Int       @default(1)
  price       Float
  createdAt   DateTime  @default(now())
}
